# This file was generated automatically from conda-smithy. To update this configuration,
# update the conda-forge.yml and/or the recipe/meta.yaml.
# -*- mode: yaml -*-

name: Build conda package
on:
  push:

  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.CONFIG }}
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        include:
          - CONFIG: linux_64_python3.11.____cpython
            UPLOAD_PACKAGES: false
            os: ubuntu
            runs_on: ['ubuntu-latest']
            DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cos7-x86_64
          - CONFIG: linux_aarch64_python3.11.____cpython
            UPLOAD_PACKAGES: false
            os: ubuntu
            runs_on: ['ubuntu-latest']
            DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cos7-x86_64
          - CONFIG: osx_64_python3.11.____cpython
            UPLOAD_PACKAGES: false
            os: macos
            runs_on: ['macos-13']
          - CONFIG: osx_arm64_python3.11.____cpython
            UPLOAD_PACKAGES: false
            os: macos
            runs_on: ['macos-14']
          - CONFIG: win_64_python3.11.____cpython
            UPLOAD_PACKAGES: false
            os: windows
            runs_on: ['windows-latest']
    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build on Linux
      if: matrix.os == 'ubuntu'
      env:
        CONFIG: ${{ matrix.CONFIG }}
        UPLOAD_PACKAGES: ${{ matrix.UPLOAD_PACKAGES }}
        DOCKER_IMAGE: ${{ matrix.DOCKER_IMAGE }}
        CI: github_actions
        CONDA_FORGE_DOCKER_RUN_ARGS: "${{ matrix.CONDA_FORGE_DOCKER_RUN_ARGS }}"
        BINSTAR_TOKEN: ${{ secrets.BINSTAR_TOKEN }}
      shell: bash
      run: |
        echo "::group::Configure binfmt_misc"
        docker run --rm --privileged multiarch/qemu-user-static:register --reset --credential yes
        export flow_run_id="github_$GITHUB_RUN_ID"
        export remote_url="https://github.com/$GITHUB_REPOSITORY"
        export sha="$GITHUB_SHA"
        export FEEDSTOCK_NAME="$(basename $GITHUB_REPOSITORY)"
        export GIT_BRANCH="$(basename $GITHUB_REF)"
        if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
          export IS_PR_BUILD="True"
        else
          export IS_PR_BUILD="False"
        fi
        echo "::endgroup::"
        #mkdir build_artifacts
        #mkdir ./build_artifacts/test/
        #touch ./build_artifacts/linux-testpackage.conda
        python3 ./build-locally.py ${CONFIG}

    - name: Build on macOS
      if: matrix.os == 'macos'
      env:
        CONFIG: ${{ matrix.CONFIG }}
        UPLOAD_PACKAGES: ${{ matrix.UPLOAD_PACKAGES }}
        CI: github_actions
        BINSTAR_TOKEN: ${{ secrets.BINSTAR_TOKEN }}
      shell: bash
      run: |
        export flow_run_id="github_$GITHUB_RUN_ID"
        export remote_url="https://github.com/$GITHUB_REPOSITORY"
        export sha="$GITHUB_SHA"
        export FEEDSTOCK_NAME="$(basename $GITHUB_REPOSITORY)"
        export GIT_BRANCH="$(basename $GITHUB_REF)"
        if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
          export IS_PR_BUILD="True"
        else
          export IS_PR_BUILD="False"
        fi
        ./.scripts/run_osx_build.sh

    - name: Install Miniconda for windows
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-version: latest
        miniforge-variant: Mambaforge
      if: matrix.os == 'windows'

    - name: Build on windows
      shell: cmd
      run: |
        set "flow_run_id=github_%GITHUB_RUN_ID%"
        set "remote_url=https://github.com/%GITHUB_REPOSITORY%"
        set "sha=%GITHUB_SHA%"
        call ".scripts\run_win_build.bat"
      env:
        PYTHONUNBUFFERED: 1
        CONFIG: ${{ matrix.CONFIG }}
        CI: github_actions
        UPLOAD_PACKAGES: ${{ matrix.UPLOAD_PACKAGES }}
        BINSTAR_TOKEN: ${{ secrets.BINSTAR_TOKEN }}
      if: matrix.os == 'windows'
      
    - name: Upload conda package (Ubuntu)
      if: matrix.os == 'ubuntu'
      working-directory: ${{ matrix.bundle_dir }}
      env:
        TARGET_REPO: ${{ github.repository }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEPLOY_RELEASE: conda-release
        ASSET_PATTERN: ${{ matrix.asset_pattern }}
      shell: bash
      run: |
        echo $(ls)
        echo $(ls ./build_artifacts)
        file=$(sudo find ./../../.. -maxdepth 30 -type f -name 'freecad*.conda' | head -n 1)
        echo $(sudo find ./../../.. -maxdepth 15 -type f -name 'freecad*')
        filename=$(basename "$file")
        # Add "LINUX_" to the beginning of the filename
        new_filename="LINUX_${filename}"
        echo "${file} ./${new_filename}"
        mv "${file}" "./${new_filename}"
        # store list of existing assets before upload
        # exclude files with the same name as new ones
        echo $(ls)
        # make sure we are in the right directory
        # upload new assets
        gh release upload --clobber -R "$TARGET_REPO" "$DEPLOY_RELEASE" ${file}
